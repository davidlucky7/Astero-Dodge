import pygame
import random
import mysql.connector

# Database Setup 
conn = mysql.connector.connect(
    host="localhost",
    user="root", 
    password="ssvm",
    database="game_db"
)
cursor = conn.cursor()

username = input("Enter your username: ").strip()
cursor.execute("SELECT high_score FROM users WHERE username = '{}' ".format(username)) 
result = cursor.fetchone()
if result is None:
    cursor.execute("INSERT INTO users (username, high_score) VALUES ('{}',{})".format(username,0))
    conn.commit()
    high_score = 0
else:
    high_score = result[0]
    print("Your previous high score:", high_score)

# Game Setup 
pygame.init()
pygame.font.init()
WIDTH, HEIGHT = 900, 600
SCORE, SPAWN_TIME, LEVEL, freeze_time, NUM, B_COUNT = 0, 0, 1, 0, 0, 30
clock = pygame.time.Clock()
LIST = [30, 25, 20, 15, 12.5, 10, 7.5, 5]
S_LIST = [50, 100, 150, 200, 250, 300, 350]

# Player Setup
P_WIDTH, P_HEIGHT = 100, 90
VEL = 10
PLAYER_X = WIDTH // 2 - P_WIDTH // 2
PLAYER_Y = HEIGHT - 100

# Enemy & Bullets
A_WIDTH, A_HEIGHT = 70, 70
BLOCKS = []
BULLETS = []
B_WIDTH, B_HEIGHT, B_VEL = 50, 50, 12
GAME_OVER = False

# Load Assets 
pygame.display.set_caption("Spaceship Game")
GAME = pygame.display.set_mode((WIDTH, HEIGHT))

# Load images safely
def load_image(path, fallback_color, size):
    try:
        return pygame.transform.scale(pygame.image.load(path), size)
    except:
        surf = pygame.Surface(size)
        surf.fill(fallback_color)
        return surf

SPACE = load_image('spacexf.webp', (0, 0, 0), (WIDTH, HEIGHT))
PLAYER = load_image('ship21.png', (255, 0, 0), (P_WIDTH, P_HEIGHT))
BLOCK_IMG = load_image('rock.png', (150, 150, 150), (A_WIDTH, A_HEIGHT))
BULLET_IMG = load_image('bull.png', (255, 255, 0), (30, 30))

# Game Functions 
def spawn():
    x = random.randint(0, WIDTH - A_WIDTH)
    y = -A_HEIGHT
    A_VEL = random.randint(4, 15)
    BLOCKS.append([x, y, A_VEL])

def movement():
    global SCORE
    for block in BLOCKS[:]:
        block[1] += block[2]
        if block[1] > HEIGHT - 80:
            SCORE += 1
            BLOCKS.remove(block)

def collision():
    global GAME_OVER
    player_rect = pygame.Rect(PLAYER_X + 20, PLAYER_Y + 10, P_WIDTH - 40, P_HEIGHT - 20)
    for block in BLOCKS:
        block_rect = pygame.Rect(block[0] + 10, block[1] + 10, A_WIDTH - 20, A_HEIGHT - 20)
        if player_rect.colliderect(block_rect):
            GAME_OVER = True

def game_over_screen():
    font_big = pygame.font.SysFont('Arial', 80)
    font_small = pygame.font.SysFont('Arial', 40)
    text = font_big.render('GAME OVER', True, (255, 255, 255))
    restart_text = font_small.render('Press ENTER to Restart', True, (255, 255, 255))
    GAME.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))
    GAME.blit(restart_text, (WIDTH // 2 - restart_text.get_width() // 2, HEIGHT // 2 + text.get_height() // 2))

def levels():
    global LEVEL, NUM
    if NUM < len(S_LIST) and SCORE >= S_LIST[NUM]:
        LEVEL += 1
        NUM += 1

def fire_bullet():
    global B_COUNT
    if len(BULLETS) < 1 and B_COUNT > 0:
        B_COUNT -= 1
        BULLETS.append([PLAYER_X + P_WIDTH // 2 - 15, PLAYER_Y])

def update_bullets():
    for bullet in BULLETS[:]:
        bullet[1] -= B_VEL
        if bullet[1] < 0:
            BULLETS.remove(bullet)
        else:
            for block in BLOCKS[:]:
                bullet_rect = pygame.Rect(bullet[0], bullet[1], B_WIDTH, B_HEIGHT)
                block_rect = pygame.Rect(block[0] + 10, block[1] + 10, A_WIDTH - 20, A_HEIGHT - 20)
                if bullet_rect.colliderect(block_rect):
                    BLOCKS.remove(block)
                    BULLETS.remove(bullet)
                    break

# Game Loop 
RUNNING = True
while RUNNING:
    clock.tick(60)
    GAME.blit(SPACE, (0, 0))

    # Event Handling (always)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            RUNNING = False

    # Key Handling
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT] and PLAYER_X - VEL > 0:
        PLAYER_X -= VEL
    if keys[pygame.K_RIGHT] and PLAYER_X + VEL < WIDTH - P_WIDTH:
        PLAYER_X += VEL
    if keys[pygame.K_UP]:
        fire_bullet()

    # Drawing UI
    font = pygame.font.SysFont('Arial', 40)
    score_display = font.render(f"Score: {SCORE}", True, (0, 255, 255))
    level_display = font.render(f"Level: {LEVEL}", True, (255, 255, 255))
    bullet_display = font.render(f"Bullets: {B_COUNT}", True, (255, 255, 255))
    high_display = font.render(f"High Score: {high_score}", True, (255, 255, 0))

    GAME.blit(score_display, (30, 70))
    GAME.blit(level_display, (30, 30))
    GAME.blit(bullet_display, (30, 110))
    GAME.blit(high_display, (WIDTH - 300, 30))

    for block in BLOCKS:
        GAME.blit(BLOCK_IMG, (block[0], block[1]))
    for bullet in BULLETS:
        GAME.blit(BULLET_IMG, (bullet[0], bullet[1]))

    if GAME_OVER:
        game_over_screen()
        if keys[pygame.K_RETURN]:
            # High Score Update
            cursor.execute("SELECT high_score FROM users WHERE username = %s", (username,))
            old_score = cursor.fetchone()[0]
            if SCORE > old_score:
                cursor.execute("UPDATE users SET high_score = {} WHERE username = '{}' ", (SCORE, username))
                conn.commit()
                high_score = SCORE
                print("New high score saved!")

            # Reset game
            SCORE = 0
            LEVEL = 1
            NUM = 0
            B_COUNT = 30
            GAME_OVER = False
            BLOCKS.clear()
            BULLETS.clear()
            PLAYER_X = WIDTH // 2 - P_WIDTH // 2
    else:
        GAME.blit(PLAYER, (PLAYER_X, PLAYER_Y))
        SPAWN_TIME += 1
        if NUM < len(LIST) and SPAWN_TIME > LIST[NUM]:
            spawn()
            SPAWN_TIME = 0
        movement()
        collision()
        levels()
        update_bullets()

    pygame.display.update()

# Cleanup 
pygame.quit()
cursor.close()
conn.close()
 
